generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password      String
  img           String?   // Optional
  country       String
  phone         String?   // Optional
  desc          String?   // Optional
  isSeller      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  gigs          Gig[]     // One-to-many relation with Gig
  sellerOrders  Order[]   @relation("SellerOrders") // Relation for orders where the user is a seller
  buyerOrders   Order[]   @relation("BuyerOrders")  // Relation for orders where the user is a buyer
  reviews       Review[]  // One-to-many relation with Review
  // Add relations for conversations
  sellerConversations Conversation[] @relation("SellerConversations")
  buyerConversations  Conversation[] @relation("BuyerConversations")
}

model Gig {
  id             Int       @id @default(autoincrement())
  userId         Int       // Foreign key to User
  title          String
  desc           String
  totalStars     Int       @default(0)
  starNumber     Int       @default(0)
  cat            String
  price          Int
  cover          String
  images         String[]
  shortTitle     String
  shortDesc      String
  deliveryTime   Int
  revisionNumber Int
  features       String[]
  sales          Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User      @relation(fields: [userId], references: [id])
  orders         Order[]   // One-to-many relation with Order
  reviews        Review[] 
}

model Order {
  id             Int       @id @default(autoincrement())
  gigId          Int       // Foreign key to Gig
  sellerId       Int       // Foreign key to User (seller)
  buyerId        Int       // Foreign key to User (buyer)
  title          String
  price          Int
  img            String?   // Optional
  isCompleted    Boolean   @default(false)
  paymentIntent  String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  gig            Gig       @relation(fields: [gigId], references: [id]) 
  seller         User      @relation("SellerOrders", fields: [sellerId], references: [id])
  buyer          User      @relation("BuyerOrders", fields: [buyerId], references: [id])
}

model Message {
  id             Int    @id @default(autoincrement())
  conversationId Int       // Foreign key for Conversation (this stays as Int)
  userId         Int       // ID of the user who sent the message
  desc           String    // Message content
  createdAt      DateTime  @default(now()) // Timestamp when the message was created
  updatedAt      DateTime  @updatedAt      // Automatically updated timestamp

  // Define the relation to the Conversation model
  conversation   Conversation @relation("ConversationToMessages", fields: [conversationId], references: [id])
}

model Conversation {
  id             Int       @id @default(autoincrement())
  sellerId       Int       // ID of the seller (remains Int to match User model)
  buyerId        Int       // ID of the buyer (remains Int to match User model)
  readBySeller   Boolean   // Whether the seller has read the conversation
  readByBuyer    Boolean   // Whether the buyer has read the conversation
  lastMessage    String?   // Optional: Last message in the conversation
  createdAt      DateTime  @default(now()) // Timestamp when the conversation was created
  updatedAt      DateTime  @updatedAt     // Automatically updated timestamp

  // Define the relation to the Message model with the same relation name
  messages       Message[] @relation("ConversationToMessages")
  // Define relations to the User model
  seller         User      @relation("SellerConversations", fields: [sellerId], references: [id])
  buyer          User      @relation("BuyerConversations", fields: [buyerId], references: [id])
}


model Review {
  id        Int      @id @default(autoincrement())
  gigId     Int      // Foreign key to Gig
  userId    Int      // Foreign key to User
  star      Int      // Star rating (1 to 5)
  desc      String   // Description of the review
  createdAt DateTime @default(now()) // Timestamp when the review was created
  updatedAt DateTime @updatedAt      // Timestamp when the review was last updated

  // Define the relation to the Gig model
  gig       Gig      @relation(fields: [gigId], references: [id])
  // Define the relation to the User model
  user      User     @relation(fields: [userId], references: [id])

  @@index([gigId, userId]) // Index for faster querying by gigId and userId
}
